/// <reference types="node" />
import * as basicAuthParser from 'basic-auth-parser';
import { EventEmitter } from 'eventemitter3';
import * as http from 'http';
import * as net from 'net';
export declare type Middleware = (req: Request, cltSocket: net.Socket, head: Buffer, next: () => void) => void;
export declare type NetConnectPromise = (port: number, hostname: string, cltSocket: net.Socket, req: Request) => Promise<net.Socket>;
export declare class Request extends http.IncomingMessage {
    auth?: ReturnType<typeof basicAuthParser>;
}
export declare class Tunnel extends EventEmitter {
    private readonly stack;
    private readonly server;
    constructor();
    use(middleware: Middleware): void;
    private handleMiddleware;
    protected connect(port: number, host: string, _cltSocket: net.Socket, _req: Request): Promise<net.Socket>;
    listen: {
        (port?: number | undefined, hostname?: string | undefined, backlog?: number | undefined, listeningListener?: (() => void) | undefined): http.Server;
        (port?: number | undefined, hostname?: string | undefined, listeningListener?: (() => void) | undefined): http.Server;
        (port?: number | undefined, backlog?: number | undefined, listeningListener?: (() => void) | undefined): http.Server;
        (port?: number | undefined, listeningListener?: (() => void) | undefined): http.Server;
        (path: string, backlog?: number | undefined, listeningListener?: (() => void) | undefined): http.Server;
        (path: string, listeningListener?: (() => void) | undefined): http.Server;
        (options: net.ListenOptions, listeningListener?: (() => void) | undefined): http.Server;
        (handle: any, backlog?: number | undefined, listeningListener?: (() => void) | undefined): http.Server;
        (handle: any, listeningListener?: (() => void) | undefined): http.Server;
    };
    close: (callback?: ((err?: Error | undefined) => void) | undefined) => http.Server;
}
export declare const basicAuth: Middleware;
